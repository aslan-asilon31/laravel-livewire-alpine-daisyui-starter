  document.addEventListener('alpine:init', () => {

    Alpine.data('productList', () => ({
      loading: false,
      allProducts: [],
      filteredProducts: [],
      paginatedProducts: [],
      currentPage: 1,
      perPage: 5,
      totalPages: 1,
      sortKey: '',
      sortAsc: true,
      isEditing: false,

      searchQuery: '',
      showModal: false,
      currentProduct: null,
      form: {
        title: '',
        price: 0,
        stock: 0
      },

      init() {
        this.fetchProducts();
      },

      async fetchProducts() {
        try {
          const res = await axios.get('https://dummyjson.com/products?limit=100');
          this.allProducts = res.data.products;

          var productsToSend = JSON.parse(JSON.stringify(this.allProducts));


          window.dispatchEvent(new CustomEvent('send-to-livewire', {
            detail: {
              products: productsToSend
            }
          }));


          console.log('cek data fetch', productsToSend);
          this.filterProducts();
        } catch (err) {
          console.error("Failed to fetch products:", err);
        }
      },

      filterProducts() {
        const query = this.searchQuery.toLowerCase();
        this.filteredProducts = this.allProducts.filter(p =>
          p.title.toLowerCase().includes(query) ||
          String(p.price).includes(query) ||
          String(p.stock).includes(query)
        );

        this.updateUrlSearch();
        this.sortData();
      },

      exportCSV() {
        const headers = ['ID', 'Title', 'Price', 'Stock'];
        const rows = this.filteredProducts.map(p => [p.id, p.title, p.price, p.stock]);

        let csvContent = "data:text/csv;charset=utf-8," + [headers.join(','), ...rows.map(e => e.join(
            ','))]
          .join("\n");

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "products.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      },

      exportExcel() {
        const now = new Date();
        const headers = ['ID', 'Title', 'Price', 'Stock', 'Date'];
        const data = this.filteredProducts.map(p => ({
          ID: p.id,
          Title: p.title,
          Price: p.price,
          Stock: p.stock,
          Date: now.toLocaleString()
        }));

        const worksheet = XLSX.utils.json_to_sheet(data, {
          header: headers,
          cellDates: true
        });


        const range = XLSX.utils.decode_range(worksheet['!ref']);
        for (let R = range.s.r + 1; R <= range.e.r; ++R) {
          // === Format tanggal ===
          const dateRef = XLSX.utils.encode_cell({
            c: 4,
            r: R
          });
          const dateCell = worksheet[dateRef];
          if (dateCell && dateCell.v) {
            const parsed = new Date(dateCell.v);
            if (!isNaN(parsed)) {
              dateCell.t = 'n';
              dateCell.v = dateToExcelSerial(parsed);
              dateCell.z = 'dd/mm/yyyy hh:mm';
            }
          }

          // === Format price (kolom 6) ===
          const priceRef = XLSX.utils.encode_cell({
            c: 5,
            r: R
          });
          const priceCell = worksheet[priceRef];
          if (priceCell && !isNaN(priceCell.v)) {
            priceCell.t = 'n';
            priceCell.z = '"$"#,##0.00'; // currency format
          }

          // === Format stock (kolom 7) ===
          const stockRef = XLSX.utils.encode_cell({
            c: 6,
            r: R
          });
          const stockCell = worksheet[stockRef];
          if (stockCell && !isNaN(stockCell.v)) {
            stockCell.t = 'n';
            stockCell.z = '0'; // integer number
          }
        }


        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, "Products");

        const timestamp = now.toISOString().replace(/[:.-]/g, "_");
        const filename = `products_${timestamp}.xlsx`;

        XLSX.writeFile(workbook, filename);

      },

      dateToExcelSerial(date) {
        const epoch = new Date(Date.UTC(1899, 11, 30));
        return (date - epoch) / (24 * 60 * 60 * 1000);
      },

      openCreate() {
        this.isEditing = false;
        this.form = {
          title: '',
          price: 0,
          stock: 0
        };
        this.currentProduct = null;
        this.showModal = true;
      },

      // sendToLivewire() {
      //   @this.call('receiveProducts', this.products);
      // },

      sortBy(key) {
        this.sortAsc = this.sortKey === key ? !this.sortAsc : true;
        this.sortKey = key;
        this.sortData();
      },

      sortData() {
        if (this.sortKey) {
          this.filteredProducts.sort((a, b) => {
            const valA = a[this.sortKey];
            const valB = b[this.sortKey];

            // Case-insensitive if string
            if (typeof valA === 'string' && typeof valB === 'string') {
              return this.sortAsc ? valA.localeCompare(valB) : valB.localeCompare(valA);
            }

            // Numeric or fallback
            return this.sortAsc ? valA - valB : valB - valA;
          });
        }

        this.totalPages = Math.ceil(this.filteredProducts.length / this.perPage);
        this.goToPage(1); // Reset to page 1
      },


      goToPage(page) {
        this.currentPage = page;
        const start = (page - 1) * this.perPage;
        const end = start + this.perPage;
        this.paginatedProducts = this.filteredProducts.slice(start, end);
      },

      updateUrlSearch() {
        const url = new URL(window.location);
        if (this.searchQuery) {
          url.searchParams.set('search', this.searchQuery); // set or update search param
        } else {
          url.searchParams.delete('search'); // remove search param if empty
        }
        window.history.pushState({}, '', url); // Update URL without reloading
      },


      nextPage() {
        if (this.currentPage < this.totalPages) this.goToPage(this.currentPage + 1);
      },

      prevPage() {
        if (this.currentPage > 1) this.goToPage(this.currentPage - 1);
      },

      openEdit(product) {
        this.isEditing = true;
        this.currentProduct = product;
        this.form = {
          title: product.title,
          price: product.price,
          stock: product.stock
        };
        this.showModal = true;
      },

      submitForm() {
        const schema = window.z.object({
          title: window.z.string().min(3, 'Judul minimal 3 karakter'),
          price: window.z.number().positive('Harga harus lebih dari 0'),
          stock: window.z.number().int().nonnegative('Stok tidak boleh negatif'),
        });

        const input = {
          title: this.form.title,
          price: Number(this.form.price),
          stock: Number(this.form.stock),
        };

        const result = schema.safeParse(input);

        if (!result.success) {
          alert(result.error.errors[0].message);
          return;
        }

        if (this.isEditing && this.currentProduct) {
          // Update
          const index = this.allProducts.findIndex(p => p.id === this.currentProduct.id);
          if (index !== -1) {
            this.allProducts[index] = {
              ...this.allProducts[index],
              ...result.data
            };
          }
        } else {
          // Create
          const newId = Math.max(...this.allProducts.map(p => p.id)) + 1;
          const newProduct = {
            id: newId,
            thumbnail: 'https://via.placeholder.com/50',
            ...result.data
          };
          this.allProducts.unshift(newProduct);
        }

        this.filterProducts();
        this.closeModal();
      },

      closeModal() {
        this.showModal = false;
        this.currentProduct = null;
      },

      saveEdit() {
        if (!this.currentProduct) return;

        const schema = window.z.object({
          title: window.z.string().min(3, 'Judul minimal 3 karakter'),
          price: window.z.number({
            invalid_type_error: 'Harga harus berupa angka'
          }).positive('Harga harus lebih dari 0'),
          stock: window.z.number({
            invalid_type_error: 'Stok harus berupa angka'
          }).int().nonnegative('Stok tidak boleh negatif'),
        });


        const input = {
          title: this.form.title,
          price: Number(this.form.price),
          stock: Number(this.form.stock),
        };

        const result = schema.safeParse(input);

        if (!result.success) {
          alert(result.error.errors[0].message);
          return;
        }


        const index = this.allProducts.findIndex(p => p.id === this.currentProduct.id);
        if (index !== -1) {
          this.allProducts[index] = {
            ...this.allProducts[index],
            title: this.form.title,
            price: this.form.price,
            stock: this.form.stock
          };
        }
        this.filterProducts();
        this.closeModal();
      },

      deleteProduct(id) {
        if (confirm('Are you sure you want to delete this product?')) {
          this.allProducts = this.allProducts.filter(p => p.id !== id);
          this.filterProducts();
        }
      }
    }));
  });